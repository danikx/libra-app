openapi: 3.0.3
info:
  title: Libra API
  description: API for library management system
  version: 1.0.0

paths:
  /api/v1/books:
    post:
      tags:
        - Book Management
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
      responses:
        '200':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '400':
          description: Invalid input data
    
    get:
      tags:
        - Book Management
      summary: Get all books
      description: Retrieve a paginated list of all books
      operationId: getAllBooks
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: sortBy
          in: query
          description: Sort field name
          schema:
            type: string
            default: title
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
      responses:
        '200':
          description: Successfully retrieved paginated list
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookDto'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  number:
                    type: integer
                  size:
                    type: integer
                  first:
                    type: boolean
                  last:
                    type: boolean
        '400':
          description: Invalid pagination parameters

  /api/v1/books/{id}:
    get:
      tags:
        - Book Management
      summary: Get book by ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '404':
          description: Book not found

  /api/v1/books/author/{authorId}:
    get:
      tags:
        - Book Management
      summary: Get books by author ID
      description: Retrieve a list of books by author ID
      operationId: getBooksByAuthor
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDto'
        '404':
          description: The author with the given ID was not found
        '500':
          description: Internal server error

  /api/v1/books/borrow/qr/{qrCode}:
    put:
      tags:
        - Book Management
      summary: Borrow a book using QR code
      operationId: borrowBookByQRCode
      parameters:
        - name: qrCode
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z0-9]{8}$'
      responses:
        '200':
          description: Book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '404':
          description: Book not found
        '400':
          description: Book is not available for borrowing

  /api/v1/books/return/qr/{qrCode}:
    put:
      tags:
        - Book Management
      summary: Return a book using QR code
      operationId: returnBook
      parameters:
        - name: qrCode
          in: path
          required: true
          schema:
            type: string
            pattern: '^[A-Z0-9]{8}$'
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        '404':
          description: Book not found
        '400':
          description: Book was not borrowed or invalid return attempt
          

  /api/v1/authors:
    post:
      tags:
        - Author Management
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDto'
      responses:
        '200':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
        '400':
          description: Invalid input data

    get:
      tags:
        - Author Management
      summary: Get all authors
      operationId: getAllAuthors
      responses:
        '200':
          description: List of authors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorDto'

  /api/v1/authors/{id}:
    get:
      tags:
        - Author Management
      summary: Get author by ID
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Author found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
        '404':
          description: Author not found

components:
  schemas:
    BookDto:
      type: object
      required:
        - title
        - isbn
        - publicationYear
        - totalCopies
        - authorId
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        title:
          type: string
          example: "Clean Code"
        isbn:
          type: string
          pattern: '^[0-9]{13}$'
          example: "9780132350884"
        publicationYear:
          type: integer
          minimum: 1000
          maximum: 9999
          example: 2023
        totalCopies:
          type: integer
          minimum: 1
          example: 5
        availableCopies:
          type: integer
          minimum: 0
          example: 5
        qrCode:
          type: string
          pattern: '^[A-Z0-9]{8}$'
          example: "ABC12345"
          readOnly: true
        authorId:
          type: integer
          format: int64
          example: 1

    AuthorDto:
      type: object
      required:
        - firstName
        - lastName
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        firstName:
          type: string
          example: "Robert"
        lastName:
          type: string
          example: "Martin"